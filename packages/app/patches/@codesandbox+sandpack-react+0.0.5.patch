diff --git a/node_modules/@codesandbox/sandpack-react/dist/esm/components/CodeEditor/CodeMirror.js b/node_modules/@codesandbox/sandpack-react/dist/esm/components/CodeEditor/CodeMirror.js
index 105702c..3356d3d 100644
--- a/node_modules/@codesandbox/sandpack-react/dist/esm/components/CodeEditor/CodeMirror.js
+++ b/node_modules/@codesandbox/sandpack-react/dist/esm/components/CodeEditor/CodeMirror.js
@@ -11,7 +11,7 @@ import * as React from "react";
 import { useSandpackTheme } from "../../hooks/useSandpackTheme";
 import { getFileName } from "../../utils/stringUtils";
 import { getCodeMirrorLanguage, getEditorTheme, getSyntaxHighlight, } from "./utils";
-export const CodeMirror = ({ code, filePath, fileType, onCodeUpdate, showLineNumbers = false, wrapContent = false, editorState = "pristine", }) => {
+export const CodeMirror = ({ code, filePath, fileType, onCodeUpdate, onCodeSave, showLineNumbers = false, wrapContent = false, editorState = "pristine", }) => {
     const wrapper = React.useRef(null);
     const cmView = React.useRef();
     const { theme, themeId } = useSandpackTheme();
@@ -34,14 +34,22 @@ export const CodeMirror = ({ code, filePath, fileType, onCodeUpdate, showLineNum
                 run: indentLess,
             },
             {
-                key: "Escape",
-                run: () => {
-                    if (wrapper.current) {
-                        wrapper.current.focus();
+                key: "Ctrl-S",
+                run: (instance) => {
+                    if (instance && onCodeSave) {
+                        onCodeSave(instance.state.doc.sliceString(0, instance.state.doc.length));
                     }
-                    return true;
-                },
+                }
             },
+            // {
+            //     key: "Escape",
+            //     run: () => {
+            //         if (wrapper.current) {
+            //             wrapper.current.focus();
+            //         }
+            //         return true;
+            //     },
+            // },
             {
                 key: "mod-Backspace",
                 run: deleteGroupBackward,
diff --git a/node_modules/@codesandbox/sandpack-react/dist/esm/components/Navigator/index.js b/node_modules/@codesandbox/sandpack-react/dist/esm/components/Navigator/index.js
index 3cc242d..586b206 100644
--- a/node_modules/@codesandbox/sandpack-react/dist/esm/components/Navigator/index.js
+++ b/node_modules/@codesandbox/sandpack-react/dist/esm/components/Navigator/index.js
@@ -3,7 +3,7 @@ import * as React from "react";
 import { useSandpack } from "../../hooks/useSandpack";
 import { BackwardIcon, ForwardIcon, RefreshIcon } from "../../icons";
 import { splitUrl } from "./utils";
-export const Navigator = () => {
+export const Navigator = ({ appendMenu: AppendMenu }) => {
     var _a;
     const [baseUrl, setBaseUrl] = React.useState("");
     const { sandpack, dispatch, listen } = useSandpack();
@@ -54,13 +54,17 @@ export const Navigator = () => {
     const handleForward = () => {
         dispatch({ type: "urlforward" });
     };
-    return (React.createElement("div", { className: c("navigator") },
-        React.createElement("button", { "aria-label": "Go back one page", className: c("button", "icon"), disabled: !backEnabled, onClick: handleBack, type: "button" },
-            React.createElement(BackwardIcon, null)),
-        React.createElement("button", { "aria-label": "Go forward one page", className: c("button", "icon"), disabled: !forwardEnabled, onClick: handleForward, type: "button" },
-            React.createElement(ForwardIcon, null)),
-        React.createElement("button", { "aria-label": "Refresh page", className: c("button", "icon"), onClick: handleRefresh, type: "button" },
-            React.createElement(RefreshIcon, null)),
-        React.createElement("input", { "aria-label": "Current Sandpack URL", className: c("input"), name: "Current Sandpack URL", onChange: handleInputChange, onKeyDown: handleKeyDown, type: "text", value: relativeUrl })));
+    return (
+        React.createElement("div", { className: c("navigator") },
+            React.createElement("button", { "aria-label": "Go back one page", className: c("button", "icon"), disabled: !backEnabled, onClick: handleBack, type: "button" },
+                React.createElement(BackwardIcon, null)),
+            React.createElement("button", { "aria-label": "Go forward one page", className: c("button", "icon"), disabled: !forwardEnabled, onClick: handleForward, type: "button" },
+                React.createElement(ForwardIcon, null)),
+            React.createElement("button", { "aria-label": "Refresh page", className: c("button", "icon"), onClick: handleRefresh, type: "button" },
+                React.createElement(RefreshIcon, null)),
+            React.createElement("input", { "aria-label": "Current Sandpack URL", className: c("input"), name: "Current Sandpack URL", onChange: handleInputChange, onKeyDown: handleKeyDown, type: "text", value: relativeUrl }),
+            AppendMenu && React.createElement(AppendMenu, null)
+        )
+    );
 };
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@codesandbox/sandpack-react/dist/esm/components/Preview/index.js b/node_modules/@codesandbox/sandpack-react/dist/esm/components/Preview/index.js
index c20d0cb..4e087f6 100644
--- a/node_modules/@codesandbox/sandpack-react/dist/esm/components/Preview/index.js
+++ b/node_modules/@codesandbox/sandpack-react/dist/esm/components/Preview/index.js
@@ -8,7 +8,7 @@ import { useSandpack } from "../../hooks/useSandpack";
 import { Navigator } from "../Navigator";
 import { RefreshButton } from "./RefreshButton";
 export { RefreshButton };
-export const SandpackPreview = ({ customStyle, showNavigator = false, showRefreshButton = true, showOpenInCodeSandbox = true, showSandpackErrorOverlay = true, viewportSize = "auto", viewportOrientation = "portrait", }) => {
+export const SandpackPreview = ({ customStyle, navigatorComponent: NavigatorComponent, showNavigator = false, showRefreshButton = true, showOpenInCodeSandbox = true, showSandpackErrorOverlay = true, viewportSize = "auto", viewportOrientation = "portrait", }) => {
     const { sandpack, listen } = useSandpack();
     const [iframeComputedHeight, setComputedAutoHeight] = React.useState(null);
     const { status, iframeRef, errorScreenRegisteredRef, openInCSBRegisteredRef, } = sandpack;
@@ -29,7 +29,7 @@ export const SandpackPreview = ({ customStyle, showNavigator = false, showRefres
             ...viewportStyle,
             display: status !== "idle" ? "flex" : "none",
         } },
-        showNavigator ? React.createElement(Navigator, null) : null,
+        showNavigator ? React.createElement(NavigatorComponent || Navigator, null) : null,
         React.createElement("div", { className: c("preview-container") },
             React.createElement("iframe", { ref: iframeRef, className: c("preview-iframe"), style: {
                     // set height based on the content only in auto mode
diff --git a/node_modules/@codesandbox/sandpack-react/dist/esm/contexts/sandpackContext.js b/node_modules/@codesandbox/sandpack-react/dist/esm/contexts/sandpackContext.js
index 9e80089..a51a819 100644
--- a/node_modules/@codesandbox/sandpack-react/dist/esm/contexts/sandpackContext.js
+++ b/node_modules/@codesandbox/sandpack-react/dist/esm/contexts/sandpackContext.js
@@ -41,7 +41,10 @@ class SandpackProvider extends React.PureComponent {
             const { recompileMode, recompileDelay } = this.props;
             const newFiles = {
                 ...files,
-                [path]: { code: newCode },
+                [path]: {
+                    ...files[path],
+                    code: newCode,
+                },
             };
             this.setState({ files: newFiles });
             if (sandpackStatus !== "running") {
@@ -118,6 +121,9 @@ class SandpackProvider extends React.PureComponent {
                 };
             });
         };
+        this.updateOpenPaths = (paths) => {
+            this.setState({ openPaths: paths });
+        };
         this.dispatchMessage = (message) => {
             if (this.client === null) {
                 console.warn("dispatch cannot be called while in idle mode");
@@ -149,8 +155,9 @@ class SandpackProvider extends React.PureComponent {
             return this.client.listen(listener);
         };
         this._getSandpackState = () => {
-            const { files, activePath, openPaths, startRoute, bundlerState, editorState, error, sandpackStatus, } = this.state;
+            const { files, activePath, openPaths, startRoute, bundlerState, editorState, error, sandpackStatus, origin, } = this.state;
             return {
+                origin,
                 files,
                 openPaths,
                 activePath,
@@ -161,6 +168,7 @@ class SandpackProvider extends React.PureComponent {
                 editorState,
                 setActiveFile: this.setActiveFile,
                 openFile: this.openFile,
+                updateOpenPaths: this.updateOpenPaths,
                 updateCurrentFile: this.updateCurrentFile,
                 updateFile: this.updateFile,
                 runSandpack: this.runSandpack,
@@ -175,6 +183,7 @@ class SandpackProvider extends React.PureComponent {
         };
         const { activePath, openPaths, files, environment, } = getSandpackStateFromProps(props);
         this.state = {
+            origin: files,
             files,
             environment,
             openPaths,
@@ -232,7 +241,7 @@ class SandpackProvider extends React.PureComponent {
                 JSON.stringify(this.props.customSetup)) {
             const { activePath, openPaths, files, environment, } = getSandpackStateFromProps(this.props);
             /* eslint-disable react/no-did-update-set-state */
-            this.setState({ activePath, openPaths, files, environment });
+            this.setState({ activePath, openPaths, files, environment, origin: files });
             if (this.state.sandpackStatus !== "running" || !this.client) {
                 return;
             }
